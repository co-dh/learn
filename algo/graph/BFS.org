#+PROPERTY: header-args :results output :exports both
*  Breadth First Search

  #+name: dotInput
  #+begin_src q :exports code
    ; adj: "rstuvwxy"!("sv"; "rw"; "wxu"; "txy"; (),"r"; "stx"; "wtuy"; "xu")
    ; adj: value key[adj] ? adj
    ; -1@"\n" sv "--" sv/: string distinct asc each raze {x,/:adj x} each til count adj;
  #+end_src

  #+RESULTS: dotInput
  #+begin_example
  0--1
  0--4
  1--5
  2--5
  2--6
  2--3
  3--6
  3--7
  5--6
  6--7
  #+end_example

  #+begin_src dot :file test.png :var dotInput=dotInput
    graph G {
        $dotInput
    }
  #+end_src

  #+RESULTS:
  [[file:test.png]]


  #+begin_src q :tangle yes :results output
    / Since array is O(1) and dictionary binary lookup is O(log n),
    / we require the nodes are index by continuous integers from 0
    / Breadth First Search of a graph represented as adjancent list
    / adj: array of array of int ( index of nodes)
    / src: int . The index of the source node
    /BFS:{[adj; src] enlist[src]{[adj;queue; i] queue, adj[queue i] except queue}[adj]/ til count adj};
    BFS:{[adj; src] enlist[src]{y,x[y z] except y}[adj]/ til count adj};
    show BFS[adj;1]
   #+end_src

   #+RESULTS:
   : 1 0 5 4 2 6 3 7


** Shortest Path from s
   par is a map from node to it's parent, and keep applying(scan) par to a node, we get it's path to s. 
   #+begin_src q
   par: (!). tree`node`parent
   (par\) `y
   #+end_src

   #+RESULTS:
   : `y`x`w`s`

** How fast is q at dictionary scan on iMac 3GHz 6-Core Intel i5

   #+begin_src q
     x: til 100 * 1000 * 1000
     d:  (a:0N? x)!(b:0N? x)
     d1:`s#(a i)!(b i:iasc a)
     v: value d1

     w: 5
     \t d w
     \t:100000 d1 w
     \t:100000  v w

     w: 50*1000*1000
     \t d w
     \t:100000 d1 w
     \t:100000  v w
   #+end_src

   #+RESULTS:
   : 10
   : 31
   : 15
   : 57
   : 30
   : 15

| 100 million rows | x[5]      | x[50,000,000] |
|------------------+-----------+---------------|
| scan             | 10,000 ns | 57,000 ns     |
| binary           | 0.30 ns   | 0.30 ns       |
| array            | 0.15 ns   | 0.15 ns       |



   
  
